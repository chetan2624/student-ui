pipeline {
    agent any

    environment {
        // AWS S3 & ECR settings (configured in Jenkins host or IAM roles)
        AWS_DEFAULT_REGION = 'ap-southeast-1'   // AWS region
        BUCKET_NAME = 'sonar-jenkins-bucket'     // S3 bucket name for uploads
        ECR_REPO = '731099197046.dkr.ecr.ap-southeast-1.amazonaws.com/cdec-b28-docker'  // ECR repository URL
        
        // SonarQube settings (configured in Jenkins global configuration)
        SONARQUBE_SERVER = 'Sonarqube'  // SonarQube server name
    }

    stages {
        
        // Stage 1: Pull code from the Git repository
        stage('Code Pull') {
            steps {
                echo "Pulling the latest code from Git repository"
                // Pull the code from the specified GitHub repository
                git 'https://github.com/Pritam-Khergade/student-ui.git'
            }
        }

        // Stage 2: Scan for credentials in the repository using GitLeaks
        stage('Scan for Credentials (GitLeaks)') {
            steps {
                echo "Scanning the code for secrets and credentials"
                // Use GitLeaks to scan the repository for any sensitive data or credentials
                sh 'gitleaks detect --source . --report=gitleaks-report.json || true'
            }
        }

        // Stage 3: Build the project with Maven
        stage('Build with Maven') {
            steps {
                echo "Building the project using Maven"
                // Clean and package the project with Maven
                sh 'mvn clean package'
            }
        }

        // Stage 4: SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                echo "Performing SonarQube analysis on the project"
                // Perform SonarQube analysis using the specified SonarQube server
                withSonarQubeEnv(installationName: SONARQUBE_SERVER) {
                    sh '''mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=student-ui \
                    -Dsonar.projectName="student-ui"'''
                }
            }
        }

        // Stage 5: Upload WAR file to S3 bucket
        stage('Upload to S3') {
            steps {
                echo "Uploading the WAR file to S3 bucket"
                // Upload the WAR file generated by Maven to the configured S3 bucket
                sh '''
                    echo "Using S3 bucket: $BUCKET_NAME"
                    aws s3 cp target/*.war s3://$BUCKET_NAME/ --region $AWS_DEFAULT_REGION
                '''
            }
        }

        // Stage 6: Build Docker image
        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for the project"
                // Build the Docker image using the Dockerfile in the repository
                sh 'docker build -t cdec-b28-docker .'
            }
        }

        // Stage 7: Scan Docker image for vulnerabilities using Trivy
        stage('Scan Docker Image (Trivy)') {
            steps {
                echo "Scanning Docker image for vulnerabilities using Trivy"
                // Scan the built Docker image for any known security vulnerabilities
                script {
                    def imageName = "cdec-b28-docker"
                    sh "trivy image $imageName || true"
                }
            }
        }

        // Stage 8: Push Docker image to AWS ECR
        stage('Push to ECR') {
            steps {
                echo "Pushing Docker image to AWS ECR"
                // Authenticate to AWS ECR and push the Docker image to the repository
                sh '''
                    docker tag cdec-b28-docker:latest "$ECR_REPO:new"
                    docker push "$ECR_REPO:new"
                '''
            }
        }

        // Stage 9: Clean Workspace and Docker Volumes/Images
        stage('Clean Workspace + Docker Volumes/Images') {
            steps {
                echo "Cleaning up the workspace and unused Docker resources"
                // Clean the Jenkins workspace and prune unused Docker volumes/images
                cleanWs()
                sh 'docker system prune -af || true'
            }
        }
    }

    // Post Stage: Notifications and actions after pipeline completion
    post {
        always {
            echo "Pipeline has completed, performing cleanup and final steps"
            // Cleanup actions that should always run
            cleanWs()  // Ensure that workspace is cleaned up after pipeline run
        }

        success {
            echo "Pipeline executed successfully!"
            // Perform actions on success, like sending notifications or updating a dashboard
            // Example: send success notification or email
        }

        failure {
            echo "Pipeline failed!"
            // Perform actions on failure, like sending failure notifications or logging
            // Example: send failure notification or email
        }
    }
}
